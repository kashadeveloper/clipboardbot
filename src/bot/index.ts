import TelegramBot, { Message } from 'node-telegram-bot-api'
import Clipboard from '@crosscopy/clipboard'
import fs from 'fs'
import { getClipboardFiles } from './clipboard-files'
import { logger } from './logger'

const IGNORED_MESSAGES = ['/start', '/keyboard', 'üñäÔ∏è –ü–æ–ª—É—á–∏—Ç—å –±—É—Ñ–µ—Ä', '‚ùå –û—á–∏—Å—Ç–∏—Ç—å –±—É—Ñ–µ—Ä']

let botInstance: TelegramBot | null = null
let isBotActive = true

function isPrivateFromAuthor(msg: Message): boolean {
  return msg.chat.type === 'private' && msg.from?.id === Number(process.env.AUTHOR_ID)
}

function setupTextHandler(bot: TelegramBot): void {
  bot.on('message', (msg) => {
    if (!isBotActive) return
    if (!isPrivateFromAuthor(msg)) return

    const text = msg.text?.trim()
    if (!text || IGNORED_MESSAGES.includes(text)) return

    logger.emit('log', `–ö–æ–ø–∏—Ä—É—é —Ç–µ–∫—Å—Ç: ${text} (${msg.from?.first_name})`)
    Clipboard.setText(text)

    bot.sendMessage(msg.chat.id, '‚úÖ')
  })
}

function setupGetClipboardHandler(bot: TelegramBot): void {
  bot.onText(/üñäÔ∏è –ü–æ–ª—É—á–∏—Ç—å –±—É—Ñ–µ—Ä/i, async (msg) => {
    if (!isBotActive) return
    if (!isPrivateFromAuthor(msg)) return
    const chatId = msg.chat.id

    try {
      if (Clipboard.hasImage()) {
        const base64 = await Clipboard.getImageBase64()
        const buffer = Buffer.from(base64, 'base64')
        await bot.sendPhoto(chatId, buffer)
        logger.emit('log', '–û—Ç–ø—Ä–∞–≤–∏–ª —Ñ–æ—Ç–æ –∏–∑ –±—É—Ñ–µ—Ä–∞')
        return
      }

      const files = await getClipboardFiles()
      if (files.length) {
        logger.emit('log', `–û—Ç–ø—Ä–∞–≤–ª—è—é —Ñ–∞–π–ª—ã: ${files.join(', ')}`)
        for (const file of files) {
          await bot.sendDocument(chatId, fs.createReadStream(file))
        }
        return
      }

      if (Clipboard.hasText()) {
        const text = await Clipboard.getText()
        if (text) {
          await bot.sendMessage(chatId, text)
          logger.emit('log', '–û—Ç–ø—Ä–∞–≤–∏–ª —Ç–µ–∫—Å—Ç –∏–∑ –±—É—Ñ–µ—Ä–∞')
        } else {
          await bot.sendMessage(chatId, '–ë—É—Ñ–µ—Ä –ø—É—Å—Ç')
          logger.emit('log', '–ë—É—Ñ–µ—Ä –ø—É—Å—Ç (—Ç–µ–∫—Å—Ç)')
        }
      } else {
        await bot.sendMessage(chatId, '–ë—É—Ñ–µ—Ä –ø—É—Å—Ç')
        logger.emit('log', '–ë—É—Ñ–µ—Ä –ø—É—Å—Ç')
      }
    } catch (err: unknown) {
      logger.emit('log', `–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –±—É—Ñ–µ—Ä–∞: ${(err as Error).message}`)
      await bot.sendMessage(chatId, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±—É—Ñ–µ—Ä–∞')
    }
  })
}

function setupClearClipboardHandler(bot: TelegramBot): void {
  bot.onText(/‚ùå –û—á–∏—Å—Ç–∏—Ç—å –±—É—Ñ–µ—Ä/i, async (msg) => {
    if (!isBotActive) return
    if (!isPrivateFromAuthor(msg)) return
    Clipboard.clear()
    await bot.sendMessage(msg.chat.id, '‚úÖ')
    logger.emit('log', '–ë—É—Ñ–µ—Ä –æ—á–∏—â–µ–Ω')
  })
}

function setupMenuHandler(bot: TelegramBot): void {
  bot.onText(/\/keyboard|\/start/i, (msg) => {
    if (!isBotActive) return
    if (!isPrivateFromAuthor(msg)) return
    bot.sendMessage(msg.chat.id, '–ú–µ–Ω—é', {
      reply_markup: {
        resize_keyboard: true,
        keyboard: [[{ text: 'üñäÔ∏è –ü–æ–ª—É—á–∏—Ç—å –±—É—Ñ–µ—Ä' }], [{ text: '‚ùå –û—á–∏—Å—Ç–∏—Ç—å –±—É—Ñ–µ—Ä' }]]
      }
    })
    logger.emit('log', '–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –º–µ–Ω—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã')
  })
}

function setupHandlers(bot: TelegramBot): void {
  setupTextHandler(bot)
  setupGetClipboardHandler(bot)
  setupClearClipboardHandler(bot)
  setupMenuHandler(bot)

  bot.on('polling_error', (err) => {
    logger.emit('log', `‚ùå Polling error: ${err.message}`)
  })

  bot.startPolling()
  logger.emit('log', '‚úÖ Bot started')
}

export async function main(token: string, authorId: string): Promise<void> {
  isBotActive = true
  if (token) process.env.BOT_TOKEN = token
  if (authorId) process.env.AUTHOR_ID = authorId
  if (!process.env.AUTHOR_ID) throw new Error('AUTHOR_ID is required')

  botInstance = new TelegramBot(process.env.BOT_TOKEN || '')

  setupHandlers(botInstance)
}

export async function stop(): Promise<void> {
  isBotActive = false
  if (botInstance) {
    botInstance.stopPolling()
    logger.emit('log', 'Bot stopped.')
  }
}

export { logger }
