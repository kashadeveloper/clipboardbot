require("dotenv").config();
const TelegramBot = require("node-telegram-bot-api");
const Clipboard = require("@crosscopy/clipboard");
const fs = require("fs");
const getClipboardFiles = require("./get-files-clipboard.js");
const logger = require("../logger");

const IGNORED_MESSAGES = [
  "/start",
  "/keyboard",
  "üñäÔ∏è –ü–æ–ª—É—á–∏—Ç—å –±—É—Ñ–µ—Ä",
  "‚ùå –û—á–∏—Å—Ç–∏—Ç—å –±—É—Ñ–µ—Ä",
];

let botInstance = null;

function isPrivateFromAuthor(msg) {
  return msg.chat.type === "private" && msg.from.id == process.env.AUTHOR_ID;
}

function setupTextHandler(bot) {
  bot.on("message", (msg) => {
    if (!isPrivateFromAuthor(msg)) return;

    const text = msg.text?.trim();
    if (!text || IGNORED_MESSAGES.includes(text)) return;

    logger.emit("log", `–ö–æ–ø–∏—Ä—É—é —Ç–µ–∫—Å—Ç: ${text} (${msg.from.first_name})`);
    Clipboard.setText(text);

    bot.sendMessage(msg.chat.id, "‚úÖ");
  });
}

function setupGetClipboardHandler(bot) {
  bot.onText(/üñäÔ∏è –ü–æ–ª—É—á–∏—Ç—å –±—É—Ñ–µ—Ä/i, async (msg) => {
    if (!isPrivateFromAuthor(msg)) return;
    const chatId = msg.chat.id;

    try {
      if (Clipboard.hasImage()) {
        const base64 = await Clipboard.getImageBase64();
        const buffer = Buffer.from(base64, "base64");
        await bot.sendPhoto(chatId, buffer);
        logger.emit("log", "–û—Ç–ø—Ä–∞–≤–∏–ª —Ñ–æ—Ç–æ –∏–∑ –±—É—Ñ–µ—Ä–∞");
        return;
      }

      const files = await getClipboardFiles();
      if (files.length) {
        logger.emit("log", `–û—Ç–ø—Ä–∞–≤–ª—è—é —Ñ–∞–π–ª—ã: ${files.join(", ")}`);
        for (const file of files) {
          await bot.sendDocument(chatId, fs.createReadStream(file));
        }
        return;
      }

      if (Clipboard.hasText()) {
        const text = await Clipboard.getText();
        if (text) {
          await bot.sendMessage(chatId, text);
          logger.emit("log", "–û—Ç–ø—Ä–∞–≤–∏–ª —Ç–µ–∫—Å—Ç –∏–∑ –±—É—Ñ–µ—Ä–∞");
        } else {
          await bot.sendMessage(chatId, "–ë—É—Ñ–µ—Ä –ø—É—Å—Ç");
          logger.emit("log", "–ë—É—Ñ–µ—Ä –ø—É—Å—Ç (—Ç–µ–∫—Å—Ç)");
        }
      } else {
        await bot.sendMessage(chatId, "–ë—É—Ñ–µ—Ä –ø—É—Å—Ç");
        logger.emit("log", "–ë—É—Ñ–µ—Ä –ø—É—Å—Ç");
      }
    } catch (err) {
      logger.emit("log", `–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –±—É—Ñ–µ—Ä–∞: ${err.message}`);
      await bot.sendMessage(chatId, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±—É—Ñ–µ—Ä–∞");
    }
  });
}

function setupClearClipboardHandler(bot) {
  bot.onText(/‚ùå –û—á–∏—Å—Ç–∏—Ç—å –±—É—Ñ–µ—Ä/i, async (msg) => {
    if (!isPrivateFromAuthor(msg)) return;
    Clipboard.clear();
    await bot.sendMessage(msg.chat.id, "‚úÖ");
    logger.emit("log", "–ë—É—Ñ–µ—Ä –æ—á–∏—â–µ–Ω");
  });
}

function setupMenuHandler(bot) {
  bot.onText(/\/keyboard|\/start/i, (msg) => {
    bot.sendMessage(msg.chat.id, "–ú–µ–Ω—é", {
      reply_markup: {
        resize_keyboard: true,
        keyboard: [["üñäÔ∏è –ü–æ–ª—É—á–∏—Ç—å –±—É—Ñ–µ—Ä"], ["‚ùå –û—á–∏—Å—Ç–∏—Ç—å –±—É—Ñ–µ—Ä"]],
      },
    });
    logger.emit("log", "–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –º–µ–Ω—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã");
  });
}

function setupHandlers(bot) {
  setupTextHandler(bot);
  setupGetClipboardHandler(bot);
  setupClearClipboardHandler(bot);
  setupMenuHandler(bot);

  bot.on("polling_error", (err) => {
    logger.emit("log", `‚ùå Polling error: ${err.message}`);
  });

  bot.startPolling();
  logger.emit("log", "‚úÖ Bot started");
}

async function main(token, authorId) {
  if (token) process.env.BOT_TOKEN = token;
  if (authorId) process.env.AUTHOR_ID = authorId;
  if (!process.env.AUTHOR_ID) throw new Error("AUTHOR_ID is required");

  botInstance = new TelegramBot(process.env.BOT_TOKEN);

  setupHandlers(botInstance);
}

async function stop() {
  if (botInstance) {
    botInstance.stopPolling();
    logger.emit("log", "Bot stopped.");
  }
}

module.exports = { main, stop, logger };
